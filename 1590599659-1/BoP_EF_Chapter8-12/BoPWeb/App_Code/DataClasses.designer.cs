#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="BoP")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertStakeHolder(StakeHolder instance);
  partial void UpdateStakeHolder(StakeHolder instance);
  partial void DeleteStakeHolder(StakeHolder instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BoPConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<StakeHolder> StakeHolders
	{
		get
		{
			return this.GetTable<StakeHolder>();
		}
	}
}

[Table(Name="dbo.StakeHolders")]
public partial class StakeHolder : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _FirstName;
	
	private string _LastName;
	
	private System.Nullable<char> _Gender;
	
	private System.Nullable<System.DateTime> _DOB;
	
	private string _TaxId;
	
	private string _Email;
	
	private int _StakeHolderType;
	
	private int _StakeHolderId;
	
	private System.Data.Linq.Binary _TimeStamp;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnGenderChanging(System.Nullable<char> value);
    partial void OnGenderChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnTaxIdChanging(string value);
    partial void OnTaxIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnStakeHolderTypeChanging(int value);
    partial void OnStakeHolderTypeChanged();
    partial void OnStakeHolderIdChanging(int value);
    partial void OnStakeHolderIdChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
	
	public StakeHolder()
	{
		OnCreated();
	}
	
	[Column(Storage="_FirstName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string FirstName
	{
		get
		{
			return this._FirstName;
		}
		set
		{
			if ((this._FirstName != value))
			{
				this.OnFirstNameChanging(value);
				this.SendPropertyChanging();
				this._FirstName = value;
				this.SendPropertyChanged("FirstName");
				this.OnFirstNameChanged();
			}
		}
	}
	
	[Column(Storage="_LastName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this.OnLastNameChanging(value);
				this.SendPropertyChanging();
				this._LastName = value;
				this.SendPropertyChanged("LastName");
				this.OnLastNameChanged();
			}
		}
	}
	
	[Column(Storage="_Gender", DbType="Char(1)", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<char> Gender
	{
		get
		{
			return this._Gender;
		}
		set
		{
			if ((this._Gender != value))
			{
				this.OnGenderChanging(value);
				this.SendPropertyChanging();
				this._Gender = value;
				this.SendPropertyChanged("Gender");
				this.OnGenderChanged();
			}
		}
	}
	
	[Column(Storage="_DOB", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> DOB
	{
		get
		{
			return this._DOB;
		}
		set
		{
			if ((this._DOB != value))
			{
				this.OnDOBChanging(value);
				this.SendPropertyChanging();
				this._DOB = value;
				this.SendPropertyChanged("DOB");
				this.OnDOBChanged();
			}
		}
	}
	
	[Column(Storage="_TaxId", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string TaxId
	{
		get
		{
			return this._TaxId;
		}
		set
		{
			if ((this._TaxId != value))
			{
				this.OnTaxIdChanging(value);
				this.SendPropertyChanging();
				this._TaxId = value;
				this.SendPropertyChanged("TaxId");
				this.OnTaxIdChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_StakeHolderType", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int StakeHolderType
	{
		get
		{
			return this._StakeHolderType;
		}
		set
		{
			if ((this._StakeHolderType != value))
			{
				this.OnStakeHolderTypeChanging(value);
				this.SendPropertyChanging();
				this._StakeHolderType = value;
				this.SendPropertyChanged("StakeHolderType");
				this.OnStakeHolderTypeChanged();
			}
		}
	}
	
	[Column(Storage="_StakeHolderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int StakeHolderId
	{
		get
		{
			return this._StakeHolderId;
		}
		set
		{
			if ((this._StakeHolderId != value))
			{
				this.OnStakeHolderIdChanging(value);
				this.SendPropertyChanging();
				this._StakeHolderId = value;
				this.SendPropertyChanged("StakeHolderId");
				this.OnStakeHolderIdChanged();
			}
		}
	}
	
	[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary TimeStamp
	{
		get
		{
			return this._TimeStamp;
		}
		set
		{
			if ((this._TimeStamp != value))
			{
				this.OnTimeStampChanging(value);
				this.SendPropertyChanging();
				this._TimeStamp = value;
				this.SendPropertyChanged("TimeStamp");
				this.OnTimeStampChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
